Техническое задание:

Для пользователя (студента/посетителя) реализовать функционал:
1. Регистрации и авторизации с возможностью восстановления пароля через
электронную почту.
2.Настройки профиля: редактирование личных данных (имя, контактная 
информация), загрузка фотографии, изменение пароля, удаление учетной записи.
3. Просмотр расписания: отображение списка курсов с датами, временем и
доступностью. 
4. Запись на театральные курсы: выбор курса, выбор преподавателя,
выбор типа прохождения (персональное или парное), выбор периода 
прохождения (даты начала и окончания), подтверждение записи.
5. Создание и редактирование портфолио: добавление фотографий,
видеозаписей, текстовых описаний достижений, возможность удаления
или изменения элементов портфолио.
6. Просмотр истории: отображение списка записей на курсы с указанием
статуса (ожидание, подтверждено,завершено). 
7. Оставление отзывов.



Для преподавателя реализовать функционал:
1. Авторизации с использованием учетных данных.
2. Просмотр списка курсов и студентов: отображение информации о своих курсах
и записанных студентах (имя, тип прохождения, даты). 
3. Управление записями студентов: Просмотр заявок на курсы, подтверждение
или отклонение записей.


Для администратора реализовать функционал:
1. Управления базами данных
2. добавление, редактирование и удаление данных о:
2.1. театральных представлениях (название, дата, описание)
2.2. курсах (название, преподаватель, расписание)
2.3. преподавателях (имя, специализация)
2.4. студентах (профильные данные)
3. модерация отзывов.




1. Подготовка рабочего окружения
Создание виртуального окружения и установка зависимостей: Создай виртуальное окружение, активируй его и установи основные пакеты:

bash
python3 -m venv venv
source venv/bin/activate
pip install flask flask-login flask-mail flask-wtf sqlalchemy flask-migrate itsdangerous


Сохраняй зависимости в файле requirements.txt, чтобы в будущем было удобно восстановить среду разработки.

2. Структурирование проекта
Определи структуру директорий, чтобы логически распределить функциональные блоки. Например:

/my_flask_app
├── app/
│   ├── __init__.py        # Инициализация приложения и подключение расширений
│   ├── config.py          # Конфигурация (SECRET_KEY, параметры БД, настройки Flask-Mail и др.)
│   ├── models.py          # Определение моделей (User, Course, Registration, PortfolioItem, Review, TheatreShow и т.д.)
│   ├── forms.py           # Формы (регистрация, логин, изменение профиля, запись на курс и проч.)
│   ├── email.py           # Логика формирования и отправки email (подтверждение регистрации, восстановление пароля)
│   ├── student/           # Blueprint для функционала студентов/посетителей
│   │   ├── routes.py      # Маршруты (регистрация, профиль, расписание, запись на курсы, портфолио, история, отзывы)
│   │   └── __init__.py
│   ├── teacher/           # Blueprint для функционала преподавателя
│   │   ├── routes.py      # Маршруты (просмотр курсов, список студентов, управление записями студентов)
│   │   └── __init__.py
│   └── admin/             # Blueprint для административного функционала
│       ├── routes.py      # Маршруты (управление данными о представлениях, курсах, преподавателях, студентах; модуляция отзывов)
│       └── __init__.py
├── migrations/            # Миграции базы данных (при использовании Flask-Migrate)
└── run.py                 # Точка входа для запуска приложения
Такое разбиение позволяет масштабировать систему, а также разделить обработку специфичных маршрутов по ролям.

3. Проектирование базы данных и моделей
Основные сущности
User: Базовая модель для всех пользователей. Поле role позволит разграничивать студентов, преподавателей и администраторов. Дополнительные атрибуты: email, password_hash, а также персональные данные (имя, контакты). Методы установки/проверки пароля, а также генерация токенов для восстановления пароля через itsdangerous.

Course: Информация о курсах: название, расписание (даты, время), преподаватель, доступность и т.д.

Registration: Модель, отражающая запись студента на курс. Содержит поля типа прохождения (персональное или парное), выбранные даты (начало, окончание), статус (ожидание, подтверждено, завершено).

PortfolioItem: Элементы портфолио для студента: изображения, видео, текстовые описания достижений.

Review: Отзывы, оставленные студентами, с возможностью модерации.

TheatreShow: Для администратора: сведения о театральных представлениях (название, дата, описание).

Связи между моделями
Связь между пользователями и регистрациями: один студент может иметь множество заявок.

Связь между курсами и регистрациями: один курс может иметь множество записей (наверное, с различными статусами).

Если преподаватель — это разновидность пользователя, то к модели Course можно привязать преподавателя через внешний ключ, либо создать отдельную модель для преподавателей.

Используй Flask-Migrate для управления миграциями и внесения изменений в схему данных.

4. Функционал для студента/посетителя
4.1. Регистрация, авторизация и восстановление пароля
Регистрация:

Создай форму регистрации (email, пароль, подтверждение пароля).

Процесс регистрации: валидация данных, хэширование пароля, сохранение в БД и уведомление.

Авторизация:

Реализуй форму входа (email и пароль) с использованием Flask-Login.

Настрой user_loader для загрузки пользователя по ID.

Восстановление пароля:

Форма для ввода email.

Генерация одноразового токена (itsdangerous) и отправка email с ссылкой для восстановления.

Маршрут для проверки токена и ввода нового пароля.

4.2. Настройки профиля
Редактирование личных данных: Форма для изменения имени, контактной информации.

Загрузка фотографии профиля: Реализуй обработку загрузки файлов (Flask-Uploads или встроенные возможности werkzeug).

Изменение пароля и удаление аккаунта: Формы для смены пароля, с подтверждением текущего пароля, и, при необходимости, процедуру подтверждения удаления аккаунта.

4.3. Просмотр расписания и запись на курсы
Просмотр расписания:

Организуй страницу, где отображается список курсов с датами, временем и доступностью, используя данные из модели Course.

Запись на курсы:

Форма для выбора курса, преподавателя, типа прохождения (персональное/парное) и периода (начало и конец).

Сохранение заявки в модели Registration, проставление статуса (например, "ожидание").

4.4. Создание и редактирование портфолио
Портфолио:

Возможность добавления, редактирования, удаления элементов портфолио (фото, видео, текст).

Создай модель PortfolioItem, связанную с пользователем.

4.5. Просмотр истории и отзывы
История записей:

Отображение всех заявок на курсы с текущим статусом (ожидание, подтверждено, завершено).

Оставление отзывов:

Форма для отправки отзыва, сохранение отзыва в модели Review с возможностью последующей модерации.

5. Функционал для преподавателя
5.1. Авторизация
Используй общую систему логина, но с проверкой роли (преподаватель) для доступа к специфичным маршрутам.

5.2. Просмотр списка курсов и студентов
Dashboard преподавателя:

Отобрази список курсов, за которые отвечает преподаватель.

Для каждого курса организуй просмотр записанных студентов: Имя, тип прохождения, даты занятий.

5.3. Управление записями студентов
Обеспечь возможность просмотра заявок на курсы.

Реализуй функции подтверждения или отклонения записей, обновляя статус заявки в модели Registration.

6. Функционал для администратора
6.1. Авторизация и доступ
Ограничь доступ к административному разделу с помощью проверки роли пользователя (администратор).

6.2. Управление базами данных
CRUD для основных данных:

Театральные представления: добавление, редактирование, удаление (название, дата, описание).

Курсы: управление данными о курсах (название, преподаватель, расписание).

Преподаватели: управление информацией (имя, специализация).

Студенты: модификация профильных данных.

6.3. Модерация отзывов
Организуй интерфейс для просмотра отзывов, с возможностью их модерации (удаление или редактирование, подтверждение публикации).

7. Безопасность и управление ролями
Система ролей:

Добавь в модель User поле role (например: "student", "teacher", "admin") для разделения доступа.

Реализуй декораторы или middleware для проверки ролей на уровне маршрутов.

Обработка ошибок и уведомления:

Внедри систему flash-сообщений для информирования пользователя о результате операций.

Обработай возможные ошибки (например, неверный токен, отсутствие нужных данных в форме) с информативными сообщениями.

8. Тестирование и деплой
Локальное тестирование:

Напиши модульные и интеграционные тесты для проверки корректного выполнения всех маршрутов и функций.

Документация:

Документируй код и процесс установки.

Используй Flask’s debug-режим для выявления и исправления ошибок.

Подготовка к деплою:

Настраивай production-сервер (например, с помощью Gunicorn и Nginx), учитывай аспекты безопасности (SSL, защита от CSRF).

Дополнительные улучшения
Уведомления: Добавление email-уведомлений о подтверждении записи, изменениях статуса заявок и обновлениях курсов.

Многофакторная аутентификация (MFA): На следующем этапе можно добавить дополнительный уровень безопасности для преподавателей и администраторов.

Интерфейс: Разработка удобного и адаптивного пользовательского интерфейса с использованием шаблонов Jinja2.




Ниже приведён план создания всех необходимых HTML‑страниц для вашего проекта с указанием рекомендуемой файловой структуры и расположения файлов.

1. Общая структура шаблонов
Чтобы обеспечить единообразие оформления и повторное использование кода, рекомендуется создать базовый шаблон, а затем отделить общие части (шапку, подвал, навигацию) в отдельные шаблоны (partials). Эта структура обычно выглядит так:

app/
 └── templates/
      ├── base.html                 # Базовый шаблон, от которого наследуются все страницы
      ├── partials/
      │      ├── header.html        # Шапка сайта (может включать логотип, заголовок и т.д.)
      │      ├── navbar.html        # Навигационное меню
      │      └── footer.html        # Подвал сайта
      ├── errors/
      │      ├── 404.html           # Страница "Не найдено" (ошибка 404)
      │      └── 500.html           # Страница "Внутренняя ошибка сервера" (ошибка 500)
      ├── login.html                # Страница входа (аутентификации)
      ├── register.html             # Страница регистрации
      ├── reset_password_request.html  # Форма запроса на сброс пароля (ввод email)
      ├── reset_password.html          # Форма сброса пароля (после перехода по токену)
      ├── student/
      │      ├── dashboard.html     # Панель студента
      │      └── profile.html       # Страница профиля студента (если требуется)
      ├── teacher/
      │      ├── dashboard.html     # Панель преподавателя
      │      └── schedule.html      # Страница для просмотра или редактирования расписания (пример)
      └── admin/
             ├── dashboard.html     # Панель администратора
             └── user_management.html  # Страница для управления пользователями (пример)
2. Пошаговый план создания страниц
Шаг 1. Создание базового шаблона и общих (partial) шаблонов
app/templates/base.html Этот шаблон определяет общую структуру: <html>, <head>, <body>. В нём с помощью блока {% block content %}{% endblock %} будут внедряться уникальные части конкретных страниц. Подключите в нём CSS, JavaScript и вставьте код шапки и подвала.

app/templates/partials/header.html, navbar.html, footer.html Создайте файлы в папке partials для повторяющихся элементов. Затем в base.html вставьте их через {% include 'partials/header.html' %}, {% include 'partials/navbar.html' %} и {% include 'partials/footer.html' %}.

Шаг 2. Создание страниц ошибок
app/templates/errors/404.html Создайте HTML‑страницу для ошибки 404. Используйте наследование от base.html и определите блок с сообщением об ошибке.

app/templates/errors/500.html Аналогичным образом создайте страницу для ошибки 500.

Пример простого шаблона для ошибки 404:

html
{% extends 'base.html' %}
{% block content %}
  <h1>Ошибка 404. Страница не найдена.</h1>
  <p>Возможно, адрес введён неправильно или страница была удалена.</p>
  <p><a href="{{ url_for('student.dashboard') }}">Вернуться на главную страницу</a></p>
{% endblock %}
Шаг 3. Создание страниц аутентификации
app/templates/login.html Страница для входа в систему. Должна содержать форму для ввода email/пароля.

app/templates/register.html Страница регистрации нового пользователя.

app/templates/reset_password_request.html Форма, где пользователь вводит свой email для запроса на сброс пароля.

app/templates/reset_password.html Форма ввода нового пароля (после перехода по уникальной ссылке, полученной на email).

Шаг 4. Создание страниц для blueprint‑ов
Для студентов (blueprint 'student'):

app/templates/student/dashboard.html Страница панели студента с информацией о курсах, новостями или статистикой.

app/templates/student/profile.html Если требуется, создайте страницу для просмотра/редактирования профиля студента.

Для преподавателей (blueprint 'teacher'):

app/templates/teacher/dashboard.html Страница панели преподавателя с информацией об уроках, расписании и т.д.

app/templates/teacher/schedule.html Страница для управления расписанием занятий или просмотра детальной информации по курсам.

Для администраторов (blueprint 'admin'):

app/templates/admin/dashboard.html Панель администратора с общим обзором системы.

app/templates/admin/user_management.html Страница для управления пользователями, ролями и другими системными данными.

3. Рекомендации по оформлению и подключению
Наследование шаблонов: Все страницы (кроме базовых partial’ей и базового шаблона) наследуются от base.html. Это позволит избежать дублирования кода и централизовать изменения общего оформления.

Использование url_for: Для всех внутренних ссылок используйте url_for с именами endpoint’ов, зарегистрированных через blueprint’ы (например, url_for('student.dashboard') или url_for('admin.dashboard')).

Организация CSS/JS: Разместите общие стили и скрипты в каталоге static и подключите их в base.html.

Проверка маршрутов: После создания шаблонов запустите команду:

bash
flask routes
чтобы убедиться, что все маршруты зарегистрированы корректно, и тестируйте переходы по URL.

4. Заключение
Следуя этому плану, вы создадите следующие файлы:

Общие шаблоны:

app/templates/base.html

app/templates/partials/header.html

app/templates/partials/navbar.html

app/templates/partials/footer.html

Страницы ошибок:

app/templates/errors/404.html

app/templates/errors/500.html

Страницы аутентификации:

app/templates/login.html

app/templates/register.html

app/templates/reset_password_request.html

app/templates/reset_password.html

Страницы для студентов:

app/templates/student/dashboard.html

app/templates/student/profile.html

Страницы для преподавателей:

app/templates/teacher/dashboard.html

app/templates/teacher/schedule.html

Страницы для администраторов:

app/templates/admin/dashboard.html

app/templates/admin/user_management.html

Этот план охватывает базовый набор страниц для типичного приложения с многоуровневым доступом (студенты, преподаватели, администраторы) и функциями аутентификации/авторизации. При необходимости вы сможете расширять или модифицировать структуру в зависимости от специфики функционала вашего театрального приложения.
